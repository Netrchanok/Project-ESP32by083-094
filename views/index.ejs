<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®</title>
  <link rel="stylesheet" href="/css/main.css">
</head>
<body>
  <div class="container">
    <div class="search-container">
      <form action="/" method="GET" id="search-form">
        <div class="autocomplete-container">
          <input type="text" name="q" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏Ñ..." class="search-input" value="<%= typeof query !== 'undefined' ? query : '' %>" autocomplete="off">
          <div id="suggestions-box" class="suggestions-list"></div>
        </div>
        <button type="submit" class="search-button">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
      </form>
    </div>
    <h1>üå§Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h1>
    <% regions.forEach(region => { %>
      <h2><%= region._id %></h2>
      <% region.provinces.forEach(p => { %>
      <div class="card">
        <div class="card-header">
          <img src="https://openweathermap.org/img/wn/<%= p.icon %>@2x.png" alt="Weather icon" width="50" height="50">
          <h3><%= p.city %></h3>
        </div>
        <p><strong>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥:</strong> <%= p.temp.toFixed(1) %> ¬∞C</p>
        <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô:</strong> <%= p.humidity %> %</p>
        <p><strong>‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®:</strong> <%= p.weather %></p>
        <small>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: <%= new Date(p.timestamp).toLocaleString('th-TH') %></small>
      </div>
      <% }) %>
    <% }) %>
  </div>

  <script>
    const searchInput = document.querySelector('.search-input');
    const suggestionsBox = document.getElementById('suggestions-box');
    const searchForm = document.getElementById('search-form');
    let activeSuggestionIndex = -1;

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    async function showSuggestions() {
      const query = searchInput.value;
      if (query.length < 1) {
        suggestionsBox.innerHTML = '';
        suggestionsBox.style.display = 'none';
        return;
      }

      try {
        const response = await fetch(`/api/suggestions?q=${encodeURIComponent(query)}`);
        const suggestions = await response.json();

        if (suggestions.length > 0) {
          suggestionsBox.innerHTML = suggestions.map(s => `<div class="suggestion-item">${s}</div>`).join('');
          suggestionsBox.style.display = 'block';

          // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ item
          document.querySelectorAll('.suggestion-item').forEach(item => {
            item.addEventListener('click', () => {
              searchInput.value = item.textContent;
              suggestionsBox.innerHTML = '';
              suggestionsBox.style.display = 'none';
              searchForm.submit();
            });
          });
        } else {
          suggestionsBox.innerHTML = '';
          suggestionsBox.style.display = 'none';
        }
      } catch (error) {
        console.error('Failed to fetch suggestions:', error);
      }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    function hideSuggestions(e) {
      if (!searchInput.contains(e.target)) {
        suggestionsBox.innerHTML = '';
        suggestionsBox.style.display = 'none';
      }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£
    function handleKeyDown(e) {
      const items = suggestionsBox.querySelectorAll('.suggestion-item');
      if (items.length === 0) return;

      // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™ active ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å item ‡πÄ‡∏î‡∏¥‡∏°
      if (activeSuggestionIndex > -1) items[activeSuggestionIndex].classList.remove('active');

      if (e.key === 'ArrowDown') {
        activeSuggestionIndex = (activeSuggestionIndex + 1) % items.length;
      } else if (e.key === 'ArrowUp') {
        activeSuggestionIndex = (activeSuggestionIndex - 1 + items.length) % items.length;
      } else if (e.key === 'Enter') {
        e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ submit form ‡∏õ‡∏Å‡∏ï‡∏¥
        if (activeSuggestionIndex > -1) items[activeSuggestionIndex].click();
        else searchForm.submit();
      }
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™ active ‡πÉ‡∏´‡πâ item ‡πÉ‡∏´‡∏°‡πà
      if(items[activeSuggestionIndex]) items[activeSuggestionIndex].classList.add('active');
    }

    searchInput.addEventListener('input', showSuggestions);
    searchInput.addEventListener('keydown', handleKeyDown);
    document.addEventListener('click', hideSuggestions);
  </script>
</body>
</html>
